/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dev <dev@student.42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 14:32:02 by dev               #+#    #+#             */
/*   Updated: 2024/11/19 10:45:02 by dev              ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <SDL2/SDL.h>
#include <stdio.h>
#include <stdlib.h>

#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 800

void SDL_ExitWithError(const char *message)
{
	SDL_Log("ERRORR : %s > %s\n", message, SDL_GetError());
	SDL_Quit();
	exit(EXIT_FAILURE);
}

int	main(int argc, char *argv[])
{
	SDL_Window *window = NULL;
	SDL_Renderer *renderer = NULL;
	SDL_version compiled;
	SDL_version linked;

	SDL_VERSION(&compiled);
	SDL_GetVersion(&linked);

	printf("SDL Version compilée : %d.%d.%d\n", compiled.major, compiled.minor, compiled.patch);
	printf("SDL Version liée : %d.%d.%d\n", linked.major, linked.minor, linked.patch);

	printf("Plateforme : %s\n", SDL_GetPlatform());

	//L'idee c'est de pas charger des truc inutilement au debut
	//mais plus de charger qqch quand on en a besoin
	if(SDL_Init(SDL_INIT_VIDEO) != 0)
		SDL_ExitWithError("Initialisation SDL");

	//Execution du programme
	//Allocation dynamique sur de la 2D

	//Creation fenetre + rendu
	// if(SDL_CreateWindowAndRenderer(800, 800, 0, &window, &renderer) != 0)
	// 	SDL_ExitWithError("Impossible to create window and render");

	//Creation fenetre
	window = SDL_CreateWindow("First Window SDL 2",
								SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
								800, 800,
								SDL_WINDOW_SHOWN | SDL_WINDOW_ALWAYS_ON_TOP);
	if (window == NULL)
		SDL_ExitWithError("Creation Failed Window");

	/* ---------------------------------------------------------------------------- */
	renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_SOFTWARE);
	if (renderer == NULL)
		SDL_ExitWithError("Creation Failed Renderer");

	//Pour Draw, il y a une superposition au niveau des dessins
	//FirstInLastDraw
	if (SDL_SetRenderDrawColor(renderer, 112, 168, 237, SDL_ALPHA_OPAQUE) != 0)
		SDL_ExitWithError("Impossible to change color for render");

	if (SDL_RenderDrawPoint(renderer, 255, 255) != 0)
		SDL_ExitWithError("Impossible to draw a point for render");

	if (SDL_RenderDrawLine(renderer, 50, 50, 500, 500) != 0)
		SDL_ExitWithError("Impossible to draw a line for render");
	SDL_Rect rectangle;
	rectangle.h = 0;
	rectangle.w = 0;
	rectangle.x = 600;
	rectangle.y = 600;

	//SDL_RenderFillRect : pour remplir le rectangle et non juste dessiner le contour.
	if (SDL_RenderDrawRect(renderer, &rectangle) != 0)
		SDL_ExitWithError("Impossible to draw a rectangle for render");
	SDL_RenderPresent(renderer);

	// if(SDL_RenderClear(renderer) != 0)
	// 	SDL_ExitWithError("Delated Failed renderer");

	/* ---------------------------------------------------------------------------- */

	SDL_Surface *image_name = NULL;
	SDL_Texture *texture_name = NULL;

	image_name = SDL_LoadBMP("image/test.bmp");
	if(image_name == NULL)
	{
		SDL_DestroyRenderer(renderer);
		SDL_DestroyWindow(window);
		SDL_ExitWithError("Impossible to load image");
	}

	texture_name = SDL_CreateTextureFromSurface(renderer, image_name);
	//Supprimer la surface TJS avant creation la texture
	SDL_FreeSurface(image_name);
	if (texture_name == NULL)
	{
		SDL_DestroyRenderer(renderer);
		SDL_DestroyWindow(window);
		SDL_ExitWithError("Impossible to create texture");
	}
	SDL_Rect rectangle_image;
	//diff entre charger une ressource en memoire et l'afficher, ceest 2 etape distincte
	if(SDL_QueryTexture(texture_name, NULL, NULL, NULL, NULL))
	{
		SDL_DestroyRenderer(renderer);
		SDL_DestroyWindow(window);
		SDL_ExitWithError("Impossible to load texture");
	}

	rectangle_image.h = 400;
	rectangle_image.w = 400;
	rectangle_image.x = 100;
	rectangle_image.y = 300;

	if(SDL_RenderCopy(renderer, texture_name, NULL, &rectangle_image) != 0)
	{
		SDL_DestroyRenderer(renderer);
		SDL_DestroyWindow(window);
		SDL_ExitWithError("Impossible to show texture");
	}
	SDL_RenderPresent(renderer);

	/* ---------------------------------------------------------------------------- */
		SDL_bool	programmed_launched = SDL_TRUE;

	while (programmed_launched)
	{
	SDL_Event event;
		while (SDL_PollEvent(&event))
		{
			switch (event.type)
			{
				case SDL_KEYDOWN:
					switch (event.key.keysym.sym)
					{
					case SDLK_e:
						printf("test\n");
						break;
					default:
						break;
					}
					break;
				case SDL_QUIT:
					programmed_launched = SDL_FALSE;
					break;
				default:
					break;
			}
		}
	}
	// SDL_Delay(5000);


	//TOUJOURS liberer la memoire
	SDL_DestroyTexture(texture_name);
	SDL_DestroyRenderer(renderer);
	SDL_DestroyWindow(window);
	SDL_Quit();


	return (0);
}



